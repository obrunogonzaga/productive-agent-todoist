import os
from agno.agent import Agent
from agno.team import Team
from agno.tools.tavily import TavilyTools
from agno.models.openrouter import OpenRouter
from agno.os import AgentOS
from agno.os.interfaces.agui import AGUI
from dotenv import load_dotenv

load_dotenv()

# Configurar modelo compartilhado
model = OpenRouter(
    id="openai/gpt-4o-mini",
    api_key=os.getenv("OPENROUTER_API_KEY")
)

# Agente Pesquisador
researcher = Agent(
    name="Pesquisador",
    role="Especialista em Pesquisa",
    instructions="""Voc√™ √© um pesquisador especializado em buscar informa√ß√µes detalhadas.
    Sua fun√ß√£o √©:
    - Pesquisar informa√ß√µes relevantes sobre o t√≥pico solicitado
    - Fornecer dados atualizados e precisos
    - Citar fontes quando poss√≠vel""",
    tools=[TavilyTools()],
    model=model,
    markdown=True
)

# Agente Analista
analyst = Agent(
    name="Analista",
    role="Analista de Dados",
    instructions="""Voc√™ √© um analista especializado em interpretar dados e informa√ß√µes.
    Sua fun√ß√£o √©:
    - Analisar as informa√ß√µes fornecidas pelo pesquisador
    - Identificar padr√µes e insights
    - Criar resumos estruturados""",
    model=model,
    markdown=True
)

# Agente Redator
writer = Agent(
    name="Redator",
    role="Especialista em Conte√∫do",
    instructions="""Voc√™ √© um redator especializado em criar conte√∫do claro e engajante.
    Sua fun√ß√£o √©:
    - Transformar an√°lises em conte√∫do leg√≠vel
    - Estruturar informa√ß√µes de forma clara
    - Criar conclus√µes e recomenda√ß√µes""",
    model=model,
    markdown=True
)

# Criar o Time de Agentes
team = Team(
    name="Time de An√°lise",
    role="Time especializado em an√°lise e produ√ß√£o de conte√∫do",
    members=[researcher, analyst, writer],  # Par√¢metro correto √© 'members'
    model=model,
    instructions="""Voc√™s s√£o um time especializado em an√°lise e produ√ß√£o de conte√∫do.
    
    FLUXO DE TRABALHO:
    1. O Pesquisador busca informa√ß√µes sobre o t√≥pico
    2. O Analista interpreta os dados encontrados
    3. O Redator cria um relat√≥rio final estruturado
    
    Trabalhem em sequ√™ncia para entregar o melhor resultado poss√≠vel.""",
    markdown=True,
    debug_mode=True
)

# Criar o AgentOS com o Team
agent_os = AgentOS(
    os_id="team-analysis-v1",
    description="Sistema de an√°lise com time de agentes especializados",
    teams=[team],  # Usa teams em vez de agents
    interfaces=[AGUI(team=team)],  # Interface AGUI com team
    telemetry=True,
    enable_mcp=True
)

# Obter a aplica√ß√£o FastAPI
app = agent_os.get_app()

if __name__ == "__main__":
    print("\n" + "="*60)
    print("üë• SISTEMA DE AN√ÅLISE COM TIME DE AGENTES")
    print("="*60)
    print("\nüìç Acesse: http://localhost:7791")
    print("\nü§ù TIME DISPON√çVEL:")
    print("   ‚Ä¢ Pesquisador - Busca informa√ß√µes")
    print("   ‚Ä¢ Analista - Interpreta dados")
    print("   ‚Ä¢ Redator - Cria conte√∫do final")
    print("\nüí° EXEMPLOS DE USO:")
    print("1. 'Analise as tend√™ncias de IA em 2024'")
    print("2. 'Pesquise sobre energia renov√°vel no Brasil'")
    print("3. 'Crie um relat√≥rio sobre produtividade remota'")
    print("="*60 + "\n")
    
    # Serve na porta 7791 para n√£o conflitar
    agent_os.serve(app="9-teams:app", port=7791)