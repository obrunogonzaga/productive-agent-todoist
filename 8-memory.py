import os
from agno.agent import Agent
from agno.tools.tavily import TavilyTools
from agno.models.openrouter import OpenRouter
from agno.memory.manager import MemoryManager
from agno.os import AgentOS
from agno.os.interfaces.agui import AGUI
from agno.db.sqlite import SqliteDb
from dotenv import load_dotenv

load_dotenv()

# Configurar banco SQLite para mem√≥ria persistente
db = SqliteDb(
    db_file="data/todoist_memory.db",
    session_table="agent_sessions"
)

# Configurar o MemoryManager
memory_manager = MemoryManager(
    memory_capture_instructions="""
        Colete as seguintes informa√ß√µes sobre o usu√°rio:
        - Nome completo
        - Prefer√™ncias de organiza√ß√£o de tarefas
        - Hor√°rios preferidos para trabalhar
        - Tipos de projetos que trabalha
        - Metas e objetivos pessoais
        - Ferramentas de produtividade que usa al√©m do Todoist
    """,
    model=OpenRouter(
        id="openai/gpt-4o-mini",
        api_key=os.getenv("OPENROUTER_API_KEY")
    ),
)

agent = Agent(
    name="Assistente Todoist",
    instructions="""Voc√™ √© um pesquisador especialista em produtividade e organiza√ß√£o de tarefas usando Todoist.
    Seu objetivo √© ajudar os usu√°rios a gerenciar suas tarefas de forma eficiente.
    
    IMPORTANTE: 
    - Voc√™ tem mem√≥ria persistente ativada. Lembre-se de informa√ß√µes importantes sobre o usu√°rio.
    - Use as mem√≥rias armazenadas para personalizar suas respostas.
    - Sempre que poss√≠vel, utilize os recursos do Todoist para listar, adicionar e completar tarefas.
    - Seja claro e objetivo em suas respostas.""",
    tools=[TavilyTools()],
    model=OpenRouter(
        id="openai/gpt-4o-mini",
        api_key=os.getenv("OPENROUTER_API_KEY")
    ),
    db=db,
    memory_manager=memory_manager,
    enable_user_memories=True,
    add_history_to_context=True,
    num_history_runs=3,
    markdown=True,
    debug_mode=True,  # Ativa debug para ver o que est√° acontecendo
)

# Criar o AgentOS com configura√ß√µes avan√ßadas
agent_os = AgentOS(
    os_id="todoist-memory-v2",  # ID √∫nico atualizado
    description="Assistente Todoist com mem√≥ria persistente",
    agents=[agent],
    interfaces=[AGUI(agent=agent)],  # Interface AGUI
    telemetry=True,  # Ativa telemetria para analytics
    enable_mcp=True,  # Ativa MCP server para integra√ß√£o externa
)

# Obter a aplica√ß√£o FastAPI
app = agent_os.get_app()

if __name__ == "__main__":
    print("\n" + "="*60)
    print("üß† ASSISTENTE TODOIST COM MEM√ìRIA PERSISTENTE")
    print("="*60)
    print("\nüìç Acesse: http://localhost:7790")
    print("\nüí° TESTE A MEM√ìRIA:")
    print("1. Diga: 'Meu nome √© [seu nome] e trabalho com [√°rea]'")
    print("2. Pergunte: 'O que voc√™ lembra sobre mim?'")
    print("3. A aba Memory no painel deve mostrar as informa√ß√µes")
    print("\n‚ö†Ô∏è  Nota: O user_id √© gerado automaticamente pelo AGUI")
    print("="*60 + "\n")
    
    # Serve sem reload quando usando MCP
    agent_os.serve(app="8-memory:app", port=7790)
